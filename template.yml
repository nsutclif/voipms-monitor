AWSTemplateFormatVersion : '2010-09-09'
Description: A serverless application for monitoring Voip.ms registration status
Parameters:
  VoipMSUser:
    Type: String
    Default: ""
  VoipMSPassword:
    Type: String
    Default: ""
    NoEcho: true
  VoipMSAccount:
    Type: String
    Default: ""
  NotificationEmail:
    Type: String
  IntervalMinutes:
    Type: Number
    Default: 5
    MinValue: 2 # 1 doesn't work with Schedule expression as is
Conditions:
  CreateSubscription:
    Fn::Not: [Fn::Equals: [Ref: NotificationEmail, '']]
Resources:
  PollFunctionLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AWSLambdaExecute
      Policies:
        - PolicyName: AccountRegistrationTableAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              # Allow the Lambda function to use the table:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                Resource:
                  Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${AccountRegistrationStatus}
              # Allow the Lambda function to pubish to the SNS topic:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource:
                  Ref: RegistrationStatusChangeTopic
  PollVoipMSFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: fillinlater
        S3Key: fillinlater
      Handler: built/index.handler
      Runtime: nodejs6.10
      Environment:
        Variables:
          USER:
            Ref: VoipMSUser
          PASSWORD:
            Ref: VoipMSPassword
          ACCOUNT:
            Ref: VoipMSAccount
          # Tell the Lambda function which table to use:
          ACCOUNT_REGISTRATION_STATUS_TABLE_NAME:
            Ref: AccountRegistrationStatus
          REGISTRATION_STATUS_CHANGE_TOPIC:
            Ref: RegistrationStatusChangeTopic
      Role:
        Fn::GetAtt: [PollFunctionLambdaExecutionRole, Arn]
  PollEvent:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression:
        Fn::Sub: rate(${IntervalMinutes} minutes)
      Targets:
      - Id: PollLambdaTarget
        Arn:
          Fn::GetAtt: [PollVoipMSFunction, Arn]
  # Allow Cloudwatch Event to trigger Lambda:
  PollEventPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt: [PollVoipMSFunction, Arn]
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt: [PollEvent, Arn]
  AccountRegistrationStatus:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: account
        AttributeType: "S"
      KeySchema:
      - AttributeName: account
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
  RegistrationStatusChangeTopic:
    Type: AWS::SNS::Topic
  NotificationSubscription:
    Type: AWS::SNS::Subscription
    Condition: CreateSubscription
    Properties:
      Protocol: email
      Endpoint:
        Ref: NotificationEmail
      TopicArn:
        Ref: RegistrationStatusChangeTopic