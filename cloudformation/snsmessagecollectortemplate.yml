AWSTemplateFormatVersion : "2010-09-09"
Description: >
  A custom resource that intercepts SNS messaages and stores them in an SQS queue.
  The stack won't finish creating until the specified number of SNS messages arrive.

Parameters:
  StackTemplateBucketName:
    Type: String
  StackTemplateBucketKeyPrefix:
    Type: String
  SNSTopicArn:
    Type: String
    AllowedPattern: arn:aws:sns:.*
    ConstraintDescription: Must be an SNS topic ARN
  MinimumMessagesToCollect:
    Type: Number
    MinValue: 0
  MaximumMinutesToWait:
    Type: Number
    MinValue: 0

Conditions:
  CreateTimeoutEvent:
    Fn::Not:
    - Fn::Equals:
      - Ref: MaximumMinutesToWait
      - 0
  OneMinuteTimeout:
    Fn::Equals:
    - Ref: MaximumMinutesToWait
    - 1

Resources:
  # Capture the SNS messages in this SQS queue:
  ResultsQueue:
    Type: AWS::SQS::Queue
  ResultsSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint:
        Fn::GetAtt: [ResultsQueue,Arn]
      Protocol: sqs
      TopicArn:
        Ref: SNSTopicArn
  # Allow the SNS topic to post to the SQS queue:
  ResultsSubscriptionPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Sid: "WrappedResultsSendMessage"
          Effect: Allow
          Principal: "*"
          Action: "sqs:SendMessage"
          Resource:
            Fn::GetAtt: [ResultsQueue, Arn]
          Condition:
            ArnEquals:
              aws:SourceArn:
                Ref: SNSTopicArn
      Queues:
      - Ref: ResultsQueue
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AWSLambdaExecute
      Policies:
      - PolicyName: NoCreateLogGroups
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          # Don't allow Lambda function to re-create its groups while CloudFormation is
          # deleting the stack
          - Effect: Deny
            Action:
            - logs:CreateLogGroup
            Resource: arn:aws:logs:*:*:*
      - PolicyName: CountTableAccess
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          # Allow the Lambda function to use the table:
          - Effect: Allow
            Action:
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            Resource:
              Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${CountTable}
  CollectorFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Ref: StackTemplateBucketName
        S3Key:
          Fn::Sub: ${StackTemplateBucketKeyPrefix}/PollVoipMSFunction.zip # TODO: Separate?
      Environment:
        Variables:
          # Tell the Lambda function which table to use:
          COUNT_TABLE:
            Ref: CountTable
          TOPIC_ARN:
            Ref: SNSTopicArn
      Handler: built/snsCollectorLambda.handler
      Runtime: nodejs6.10
      Role:
        Fn::GetAtt: [LambdaExecutionRole, Arn]
  # Create a log group for the Lambda function so that it gets deleted when the stack is deleted.
  CollectorFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${CollectorFunction}
  CountTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: collector
        AttributeType: "S"
      KeySchema:
      - AttributeName: collector
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
  # Allow the Lambda function to be invoked by the SNS topic:
  LambdaSNSPolicy:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt: [CollectorFunction, Arn]
      Principal: sns.amazonaws.com
      Action: lambda:InvokeFunction
      SourceArn:
        Ref: SNSTopicArn
  # Subscribe the Lambda function to the SNS topic:
  LambdaSNSSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint:
        Fn::GetAtt: [CollectorFunction, Arn]
      Protocol: lambda
      TopicArn:
        Ref: SNSTopicArn
  SNSMessageCollector:
    Type: Custom::SNSMessageCollector
    Properties:
      ServiceToken:
        Fn::GetAtt: [CollectorFunction, Arn]
      MinimumMessagesToCollect:
        Ref: MinimumMessagesToCollect
      MaximumMinutesToWait:
        Ref: MaximumMinutesToWait
    # Prevent Lambda function from creating the log group so the stack doesn't error when it tries to do it again:
    DependsOn:
    - CollectorFunctionLogGroup
    # - TimeoutEventPermission can't depend on this conditionally created resource
  TimeoutEvent:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression:
        # Need to say "1 minute" (singular) or "2 minutes" (plural)
        Fn::If:
        - OneMinuteTimeout
        - rate(1 minute)
        - Fn::Sub: "rate(${MaximumMinutesToWait} minutes)"
      Targets:
      - Id: PollLambdaTarget
        Arn:
          Fn::GetAtt: [CollectorFunction, Arn]
    Condition:
      CreateTimeoutEvent
  # Allow Cloudwatch Event to trigger Lambda:
  TimeoutEventPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt: [CollectorFunction, Arn]
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt: [TimeoutEvent, Arn]
    Condition:
      CreateTimeoutEvent
Outputs:
  ResultsQueueURL:
    Value:
      Ref: ResultsQueue
  ResultsQueueArn:
    Value:
      Fn::GetAtt: [ResultsQueue, Arn]