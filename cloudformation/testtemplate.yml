AWSTemplateFormatVersion : "2010-09-09"
Description: An experimental test harness for voipms-monitor

Parameters:
  Repo:
    Type: String
  GitHubToken:
    Type: String
    NoEcho: true
  CommitHash:
    Type: String
  S3Bucket:
    Type: String
  S3Prefix:
    Type: String

Resources:
  # Nested stacks cannot contain Transforms!  Can't use Serverless Application Model for nested stacks :-(
  GitHubStatusCustomResourceStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: githubstatus-shared-template.yml
  PendingStatus:
    Type: Custom::GitHubStatus
    Properties:
      ServiceToken:
        Fn::GetAtt: [GitHubStatusCustomResourceStack, Outputs.GitHubStatusFunctionArn]
      Repo:
        Ref: Repo
      Context: "continuous-integration/functional"
      GitHubToken:
        Ref: GitHubToken
      CommitHash:
        Ref: CommitHash
      Target_URL:
        Fn::Sub:
          https://console.aws.amazon.com/cloudformation/home?region=${AWS::Region}#/stack/detail?stackId=${AWS::StackId}
      Description: "Functional tests starting..."
      State: pending
  # Nested stacks cannot contain Transforms!  Can't use Serverless Application Model for nested stacks :-(
  BadPasswordStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        IntervalMinutes: 3
        NotificationEmail: ""
        VoipMSAccount: "test"
        VoipMSPassword: "test"
        VoipMSUser: "test"
      TemplateURL: template.yml
  SNSMessageCollectorStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        SNSTopicArn:
          Fn::GetAtt: [BadPasswordStack, Outputs.RegistrationStatusChangeTopicArn]
        MinimumMessagesToCollect: 1
        MaximumMinutesToWait: 5
      TemplateURL: snsmessagecollectortemplate.yml
  BadPasswordTestPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Action:
          - sqs:ReceiveMessage
          - sqs:DeleteMessageBatch
          Resource:
          - Fn::GetAtt: [SNSMessageCollectorStack, Outputs.ResultsQueueArn]
      ManagedPolicyName: 
        Fn::Sub: ${AWS::StackName}-BadPasswordTestPolicy
  # CfnTest custom resources:
  CfnTestStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: cfn-test-instance-template.yml
      Parameters:
        CodeS3Key: bad-password-test-lambda.ts.ts
        LambdaHandler: built/bad-password-test-lambda.handler
        TestParameters:
          Fn::Join:
          - ","
          - - Fn::Join:
              - "="
              # It would be nice to URL encode these here...
              - - ResultsSQSQueueURL
                - Fn::GetAtt: [SNSMessageCollectorStack, Outputs.ResultsQueueURL]
        LambdaManagedPolicyArns:
          Fn::Join:
          - ","
          - - arn:aws:iam::aws:policy/AWSLambdaExecute
            - Ref: BadPasswordTestPolicy
  # Give the report writer access to S3
  CfnReportPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Action:
          - s3:PutObject
          Resource:
          - Fn::Sub: arn:aws:s3:::${S3Bucket}
      ManagedPolicyName: 
        Fn::Sub: ${AWS::StackName}-CfnReportPolicy
  CfnTestSharedStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: cfn-test-shared-template.yml
      Parameters:
        S3AccessPolicyArn:
          Ref: CfnReportPolicy
  TestReport:
    Type: Custom::TestReport
    Properties:
      ServiceToken:
        Fn::GetAtt: [CfnTestSharedStack, Outputs.CfnTestReportFunctionArn]
      S3Bucket:
        Ref: S3Bucket
      S3Prefix:
        Ref: S3Prefix
      BadPasswordResults:
        Fn::GetAtt: [CfnTestStack, Outputs.TestResult]
  CompleteStatus:
    Type: Custom::GitHubStatus
    Properties:
      ServiceToken:
        Fn::GetAtt: [GitHubStatusCustomResourceStack, Outputs.GitHubStatusFunctionArn]
      Repo:
        Ref: Repo
      Context: "continuous-integration/functional"
      GitHubToken:
        Ref: GitHubToken
      CommitHash:
        Ref: CommitHash
      Target_URL:
        Fn::Sub:
          https://console.aws.amazon.com/cloudformation/home?region=${AWS::Region}#/stack/detail?stackId=${AWS::StackId}
      Description:
        Fn::GetAtt: [TestReport, Description]
      State:
        Fn::GetAtt: [TestReport, State]
    DependsOn: BadPasswordStack
Outputs:
  TestResult:
    Value:
      Fn::GetAtt: [TestReport, OverallResult]
