AWSTemplateFormatVersion : "2010-09-09"
Description: An experimental test harness for voipms-monitor

Parameters:
  StackTemplateBucketName:
    Type: String
  StackTemplateBucketKeyPrefix:
    Type: String
  Repo:
    Type: String
  GitHubToken:
    Type: String
    NoEcho: true
  CommitHash:
    Type: String
  SelfDestructScheduleExpression:
    Type: String

Conditions:
  CreateSelfDestruct:
    Fn::Not:
    - Fn::Equals:
      - Ref: SelfDestructScheduleExpression
      - ''

Resources:
  # Nested stacks cannot contain Transforms!  Can't use Serverless Application Model for nested stacks :-(
  GitHubStatusCustomResourceStack:
    Type: AWS::CloudFormation::Stack
    DependsOn: SelfDestructLambdaExecutionRole # The execution role must still exist for this to be deleted by the self destruct Lamb
    Properties:
      Parameters:
        StackTemplateBucketName:
          Ref: StackTemplateBucketName
        StackTemplateBucketKeyPrefix:
          Ref: StackTemplateBucketKeyPrefix
      TemplateURL:
        Fn::Sub: https://s3.${AWS::URLSuffix}/${StackTemplateBucketName}/${StackTemplateBucketKeyPrefix}/githubstatus-shared-template.yml
  PendingStatus:
    Type: Custom::GitHubStatus
    DependsOn: SelfDestructLambdaExecutionRole # The execution role must still exist for this to be deleted by the self destruct Lamb
    Properties:
      ServiceToken:
        Fn::GetAtt: [GitHubStatusCustomResourceStack, Outputs.GitHubStatusFunctionArn]
      Repo:
        Ref: Repo
      Context: "continuous-integration/functional"
      GitHubToken:
        Ref: GitHubToken
      CommitHash:
        Ref: CommitHash
      Target_URL:
        Fn::Sub:
          https://console.aws.amazon.com/cloudformation/home?region=${AWS::Region}#/stack/detail?stackId=${AWS::StackId}
      Description: "Functional tests starting..."
      State: pending
  # Nested stacks cannot contain Transforms!  Can't use Serverless Application Model for nested stacks :-(
  BadPasswordStack:
    Type: AWS::CloudFormation::Stack
    DependsOn: SelfDestructLambdaExecutionRole # The execution role must still exist for this to be deleted by the self destruct Lamb
    Properties:
      Parameters:
        StackTemplateBucketName:
          Ref: StackTemplateBucketName
        StackTemplateBucketKeyPrefix:
          Ref: StackTemplateBucketKeyPrefix
        IntervalMinutes: 3
        NotificationEmail: ""
        VoipMSAccount: "test"
        VoipMSPassword: "test"
        VoipMSUser: "test"
      TemplateURL:
        Fn::Sub: https://s3.${AWS::URLSuffix}/${StackTemplateBucketName}/${StackTemplateBucketKeyPrefix}/template.yml
  SNSMessageCollectorStack:
    Type: AWS::CloudFormation::Stack
    DependsOn: SelfDestructLambdaExecutionRole # The execution role must still exist for this to be deleted by the self destruct Lamb
    Properties:
      Parameters:
        StackTemplateBucketName:
          Ref: StackTemplateBucketName
        StackTemplateBucketKeyPrefix:
          Ref: StackTemplateBucketKeyPrefix
        SNSTopicArn:
          Fn::GetAtt: [BadPasswordStack, Outputs.RegistrationStatusChangeTopicArn]
        MinimumMessagesToCollect: 1
        MaximumMinutesToWait: 5
      TemplateURL:
        Fn::Sub: https://s3.${AWS::URLSuffix}/${StackTemplateBucketName}/${StackTemplateBucketKeyPrefix}/snsmessagecollectortemplate.yml
  BadPasswordTestPolicy:
    Type: AWS::IAM::ManagedPolicy
    DependsOn: SelfDestructLambdaExecutionRole # The execution role must still exist for this to be deleted by the self destruct Lamb
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Action:
          - sqs:ReceiveMessage
          - sqs:DeleteMessageBatch
          Resource:
          - Fn::GetAtt: [SNSMessageCollectorStack, Outputs.ResultsQueueArn]
      ManagedPolicyName: 
        Fn::Sub: ${AWS::StackName}-BadPasswordTestPolicy
  # CfnTest custom resources:
  CfnTestStack:
    Type: AWS::CloudFormation::Stack
    DependsOn: SelfDestructLambdaExecutionRole # The execution role must still exist for this to be deleted by the self destruct Lamb
    Properties:
      TemplateURL:
        Fn::Sub: https://s3.${AWS::URLSuffix}/${StackTemplateBucketName}/${StackTemplateBucketKeyPrefix}/cfn-test-instance-template.yml
      Parameters:
        StackTemplateBucketName:
          Ref: StackTemplateBucketName
        StackTemplateBucketKeyPrefix:
          Ref: StackTemplateBucketKeyPrefix
        CodeS3Key: testLambda.ts
        LambdaHandler: built/badPasswordTestLambda.handler
        TestParameters:
          Fn::Join:
          - ","
          - - Fn::Join:
              - "="
              # It would be nice to URL encode these here...
              - - ResultsSQSQueueURL
                - Fn::GetAtt: [SNSMessageCollectorStack, Outputs.ResultsQueueURL]
        LambdaManagedPolicyArns:
          Fn::Join:
          - ","
          - - arn:aws:iam::aws:policy/AWSLambdaExecute
            - Ref: BadPasswordTestPolicy
  # Give the report writer access to S3
  # TODO: Just make it all buckets and put this in shared stack?
  CfnReportPolicy:
    Type: AWS::IAM::ManagedPolicy
    DependsOn: SelfDestructLambdaExecutionRole # The execution role must still exist for this to be deleted by the self destruct Lamb
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Action:
          - s3:PutObject
          Resource:
          - Fn::Sub: arn:aws:s3:::${StackTemplateBucketName}
      ManagedPolicyName: 
        Fn::Sub: ${AWS::StackName}-CfnReportPolicy
  CfnTestSharedStack:
    Type: AWS::CloudFormation::Stack
    DependsOn: SelfDestructLambdaExecutionRole # The execution role must still exist for this to be deleted by the self destruct Lamb
    Properties:
      TemplateURL:
        Fn::Sub: https://s3.${AWS::URLSuffix}/${StackTemplateBucketName}/${StackTemplateBucketKeyPrefix}/cfn-test-shared-template.yml
      Parameters:
        StackTemplateBucketName:
          Ref: StackTemplateBucketName
        StackTemplateBucketKeyPrefix:
          Ref: StackTemplateBucketKeyPrefix
        S3AccessPolicyArn:
          Ref: CfnReportPolicy
  TestReport:
    Type: Custom::TestReport
    DependsOn: SelfDestructLambdaExecutionRole # The execution role must still exist for this to be deleted by the self destruct Lamb
    Properties:
      ServiceToken:
        Fn::GetAtt: [CfnTestSharedStack, Outputs.CfnTestReportFunctionArn]
      S3Bucket:
        Ref: StackTemplateBucketName
      S3Prefix:
        Ref: StackTemplateBucketKeyPrefix
      BadPasswordResults:
        Fn::GetAtt: [CfnTestStack, Outputs.TestResult]
  CompleteStatus:
    Type: Custom::GitHubStatus
    DependsOn: SelfDestructLambdaExecutionRole # The execution role must still exist for this to be deleted by the self destruct Lamb
    Properties:
      ServiceToken:
        Fn::GetAtt: [GitHubStatusCustomResourceStack, Outputs.GitHubStatusFunctionArn]
      Repo:
        Ref: Repo
      Context: "continuous-integration/functional"
      GitHubToken:
        Ref: GitHubToken
      CommitHash:
        Ref: CommitHash
      Target_URL:
        Fn::Sub:
          https://console.aws.amazon.com/cloudformation/home?region=${AWS::Region}#/stack/detail?stackId=${AWS::StackId}
      Description:
        Fn::GetAtt: [TestReport, Description]
      State:
        Fn::GetAtt: [TestReport, State]
    DependsOn: BadPasswordStack
  SelfDestructLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AWSLambdaExecute
      Policies:
      - PolicyName: NoCreateLogGroups
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          # Don't allow Lambda function to re-create its groups while CloudFormation is
          # deleting the stack
          - Effect: Deny
            Action:
            - logs:CreateLogGroup
            Resource: arn:aws:logs:*:*:*
      - PolicyName: DeleteStack
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - cloudformation:DeleteStack
            - cloudformation:* # testing
            - events:DeleteRule # arn:aws:events:us-east-1:729398747886:rule/voipms-test-632-SelfDestructEvent-11QAJ5RX1J5AZ
            - events:RemoveTargets # arn:aws:events:us-east-1:729398747886:rule/voipms-test-630-SelfDestructEvent-D3ZI90HEZKN
            - lambda:DeleteFunction
            - lambda:InvokeFunction # for executing custom resources
            - lambda:RemovePermission # arn:aws:lambda:us-east-1:729398747886:function:voipms-test-630-SelfDestructLambda-UMOHLVWQN84P
            - logs:DeleteLogGroup
            - sqs:DeleteQueue
            - sqs:SetQueueAttributes # https://sqs.us-east-1.amazonaws.com/729398747886/voipms-test-634-SNSMessageCollectorStack-1J7YI9CZDTIM-ResultsQueue-8FXIXFIYH23M
            Resource:
              "*" # TODO: Improve
          - Effect: Allow
            Action:
            - dynamo:*
            Resource: #
            - Fn::Sub: "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${AWS::StackName}*"
          - Effect: Allow
            Action:
            - sns:*
            Resource:
            - Fn::Sub: "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${AWS::StackName}*"
          - Effect: Allow
            Action:
            - iam:DeletePolicy
            - iam:ListPolicyVersions
            - iam:GetPolicy
            Resource:
              # Only allow deleting policies created by this stack
              Fn::Sub: "arn:aws:iam::${AWS::AccountId}:policy/${AWS::StackName}*"
          - Effect: Allow
            Action:
            - iam:DeleteRole
            - iam:DeleteRolePolicy
            - iam:DetachRolePolicy
            Resource:
              # Only allow deleting roles created by this stack
              Fn::Sub: "arn:aws:iam::${AWS::AccountId}:role/${AWS::StackName}*"
  SelfDestructLambda:
    Type: AWS::Lambda::Function
    Condition: CreateSelfDestruct
    Properties:
      Code:
        S3Bucket:
          Ref: StackTemplateBucketName
        S3Key:
          Fn::Sub: ${StackTemplateBucketKeyPrefix}/PollVoipMSFunction.zip # TODO: Separate?
      Handler: built/selfDestructLambda.handler
      Runtime: nodejs6.10
      Role:
        Fn::GetAtt: [SelfDestructLambdaExecutionRole, Arn]
      Environment:
        Variables:
          # Tell the Lambda function which table to use:
          STACK_ID:
            Ref: AWS::StackId
  # Create a log group for the Lambda function so that it gets deleted when the stack is deleted.
  SelfDestructLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: SelfDestructLambdaExecutionRole # The execution role must still exist for this to be deleted by the self destruct Lamb
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${SelfDestructLambda}
  SelfDestructEvent:
    Type: AWS::Events::Rule
    Condition: CreateSelfDestruct
    Properties:
      ScheduleExpression: 
        Ref: SelfDestructScheduleExpression
      Targets:
      - Id: PollLambdaTarget
        Arn:
          Fn::GetAtt: [SelfDestructLambda, Arn]
  # Allow Cloudwatch Event to trigger Lambda:
  SelfDestructEventPermission:
    Type: AWS::Lambda::Permission
    Condition: CreateSelfDestruct
    Properties:
      FunctionName:
        Fn::GetAtt: [SelfDestructLambda, Arn]
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt: [SelfDestructEvent, Arn]
Outputs:
  TestResult:
    Value:
      Fn::GetAtt: [TestReport, OverallResult]
