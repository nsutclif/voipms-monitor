AWSTemplateFormatVersion : "2010-09-09"
Description: This stack wraps the voip-ms template and redirects SNS messages into an SQS queue.
Parameters:
  VoipMSUser:
    Type: String
    Default: ""
  VoipMSPassword:
    Type: String
    Default: ""
    NoEcho: true
  VoipMSAccount:
    Type: String
    Default: ""
  NotificationEmail:
    Type: String
  IntervalMinutes:
    Type: Number
    Default: 5
    MinValue: 2 # 1 doesn't work with Schedule expression as is
  MessagesToWaitFor:
    Type: Number
    MinValue: 0
  MessagesTimeoutSeconds:
    Type: Number
    MinValue: 0
Resources:
  # Nested stacks cannot contain Transforms!  Can't use Serverless Application Model for nested stacks :-(
  WrappedStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        IntervalMinutes:
          Ref: IntervalMinutes
        NotificationEmail:
          Ref: NotificationEmail
        VoipMSAccount:
          Ref: VoipMSAccount
        VoipMSPassword:
          Ref: VoipMSPassword
        VoipMSUser:
          Ref: VoipMSUser
      TemplateURL: template.yml
  # Capture the SNS messages in this SQS queue:
  ResultsQueue:
    Type: AWS::SQS::Queue
  ResultsSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint:
        Fn::GetAtt: [ResultsQueue,Arn]
      Protocol: sqs
      TopicArn:
        Fn::GetAtt: [WrappedStack, Outputs.RegistrationStatusChangeTopicArn]
  # Allow the SNS topic to post to the SQS queue:
  ResultsSubscriptionPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Sid: "WrappedResultsSendMessage"
          Effect: Allow
          Principal: "*"
          Action: "sqs:SendMessage"
          Resource:
            Fn::GetAtt: [ResultsQueue, Arn]
          Condition:
            ArnEquals:
              aws:SourceArn:
                Fn::GetAtt: [WrappedStack, Outputs.RegistrationStatusChangeTopicArn]
      Queues:
      - Ref: ResultsQueue
  WaitForMessagesHandle:
    Type: AWS::CloudFormation::WaitConditionHandle
  # Subscribe the wait condition handle to the SNS topic:
  WaitForMessagesSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint:
        Ref: WaitForMessagesHandle
      Protocol: https
      TopicArn:
        Fn::GetAtt: [WrappedStack, Outputs.RegistrationStatusChangeTopicArn]
  WaitForMessages:
    Type: AWS::CloudFormation::WaitCondition
    Properties:
      Count:
        Ref: MessagesToWaitFor
      Handle:
        Ref: WaitForMessagesHandle
      Timeout:
        Ref: MessagesTimeoutSeconds
Outputs:
  ResultsQueueArn:
    Value:
      Fn::GetAtt: [ResultsQueue, Arn]
  WaitForMessagesUrl:
    Value:
      Ref: WaitForMessagesHandle